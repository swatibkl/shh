Artificial Intelligence


PRACTICAL NO-1
Aim: Write a program to implement Breadth first search algorithm.

graph = {
'5' : ['3','7'],
'3' : ['2', '4'],
'7' : ['8'],
'2' : [],
'4' : ['8'],
'8' : []
}
visited = [] #List for visited nodes.
queue = [] #Initialize a queue
def bfs(visited, graph, node): #function for BFS
visited.append(node)
queue.append(node)
while queue: #Creating loop to visit each node
m = queue.pop(0)
print (m, end = " ")
for neighbour in graph[m]:
if neighbour not in visited:
visited.append(neighbour)
queue.append(neighbour)
#Driver code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')
Output:
Following is the Breadth-First Search
5 3 7 2 4 8

______________________________________________________________________________________________________________________________________________________________________________________________________________________________________  

Practical No.2 
Aim: Write a program to implement breadth first search algorithm.

Code:
# Using a Python dictionary to act as an adjacency list
graph = {
'5' : ['3','7'],
'3' : ['2', '4'],
'7' : ['8'],
'2' : [],
'4' : ['8'],
'8' : []
}
visited = set() # Set to keep track of visited nodes of graph.
def dfs(visited, graph, node): #function for dfs
if node not in visited:
print (node)
visited.add(node)
for neighbour in graph[node]:
dfs(visited, graph, neighbour)
# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '5')
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________


Practical No.3
Aim: Write a program to solve tower of Hanoi problem.

def TowerOfHanoi(n , s_pole, d_pole, i_pole):
if n == 1:
print("Move disc 1 from pole",s_pole,"to pole",d_pole)
return
TowerOfHanoi(n-1, s_pole, i_pole, d_pole)
print("Move disc",n,"from pole",s_pole,"to pole",d_pole)
TowerOfHanoi(n-1, i_pole, d_pole, s_pole)
n = 3
TowerOfHanoi(n, 'A', 'C', 'B')
# A, C, B are the name of poles

______________________________________________________________________________________________________________________________________________________________________

Practical No.4
Aim: Write a program to shuffle a deck of cards.
Code:

# Python program to shuffle a deck of card
# importing modules
import itertools, random
# make a deck of cards
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))
# shuffle the cards
random.shuffle(deck)
# draw five cards
print("You got:")
for i in range(5):
print(deck[i][0], "of", deck[i][1])

_________________________________________________________________________________________________________________________________________________________________________________________________________________________________


No: 5 prolog
Aim: Derive the expression based on Associative Law.
Associative Law formula:
 
The formula for Associative law can be derived easily from the definition and examples. Associative law is a mathematical law that can be followed for addition and multiplication of three numbers, without any pattern of grouping or particular pattern. Three numbers can be grouped and regrouped with two of them in brackets and one outside, and solved starting from the bracketed numbers. The grouping or combination of numbers in any way, through associative law, does not yield a different result than the original one. According to Associative Law, the three numbers can be grouped in the following ways:
a+(b+c)=(a+b)+c a*(b*c)=(a*b)*c

Code:
%Define the associative law for addition
associative_law(A,B,C,Result):-Result is A+(B+C).
%Define some expression.
expression1(2,3,4).
expression2(5,6,7).
%Derive the result using associative law
derive_result:-
expression1(A,B,C),
associative_law(A,B,C,Result1),
expression2(X,Y,Z),
associative_law(X,Y,Z,Result2),
write('Result of expression1 is:'),write(Result1),nl,
write('Result of expression2 is:'),write(Result2),nl.
___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________


No.6
Aim: Derive the expression based on Distributive Law.
Distributive Law Definition:
What is Distributive Property?
The distributive property states that in a multiplication problem when one factor is rewritten as the sum of two numbers, the product does not change. The word  distribute  means to divide something or give a share or part of something. The distributive property is one of the most basic and most common functions which is used in the field of Mathematics, as it helps to simplify very complex equations.
Distributive Property Formula
As explained above, the distributive property formula helps to simplify complex equations by breaking them into simpler equations. The formula used are:
a (b + c) = (a x b) + (a x c)
This is the distributive property of multiplication over addition. The distributive property formula can also be used in the form of a (b - c) = (a x b) - (a x c)
This is the distributive property of multiplication over subtraction.


Code:
%define the distributive law for multiplication over addition
distributive_law(A,B,C,Result):-Result is A*(B+C).
%Define some expression
expression1(2,3,4).
expression2(5,6,7).
%Define the result using the distributive law
derive_result:-
expression1(A,B,C),
distributive_law(A,B,C,Result1),
expression2(X,Y,Z),
distributive_law(X,Y,Z,Result2),
write('Result of expression1 is:'),write(Result1),nl,
write('Result of expression2 is:'),write(Result2),nl.

____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Practical No-9
Aim: Write a program to derive the predicate.
(For e.g.: Sachin is batsman, batsman is cricketer) - >Sachin is Cricketer.
Code:
batsman(sachin). cricketer(batsman). cricketer(sachin) :- batsman(sachin),cricketer(batsman).
Output:

Practical No-10
Aim: Write a program which contains three predicates: male, female, parent. Make rules for following family relations: father, mother, grandfather, grandmother, brother, sister, uncle, aunt, nephew and niece, cousin.
Question:
i. Draw Family Tree. ii. Define: Clauses, Facts, Predicates and Rules with conjunction and disjunction

Code:
female(pam).
female(liz).
female(pat).
male(jim).
male(bob).
male(tom).
parent(pam,jim).
parent(pam,bob).
parent(liz,tom).
parent(pat,tom).
parent(tom,bob).
mother(X,Y):- parent(X,Y),female(X).
father(X,Y):- parent(X,Y),male(X).
sister(X,Y):- parent(Z,X),parent(Z,Y),female(X),X\==Y.
brother(X,Y):-parent(Z,X),parent(Z,Y),male(X),X\==Y.
grandparent(X,Y) :- parent(X,Z), parent(Z,Y).
grandmother(X,Z) :- mother(X,Y), parent(Y,Z).
uncle(X,Z) :- brother(X,Y), parent(Y,Z).
aunt(X,Y) :- parent(X,Z),parent(Y,Z), female(X),male(Y).



